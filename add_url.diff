diff --git a/frameworks/js/avplayer/avplayer_napi.cpp b/frameworks/js/avplayer/avplayer_napi.cpp
index d5d9b31e..7423c441 100644
--- a/frameworks/js/avplayer/avplayer_napi.cpp
+++ b/frameworks/js/avplayer/avplayer_napi.cpp
@@ -1298,7 +1298,8 @@ napi_value AVPlayerNapi::JsSetMediaSource(napi_env env, napi_callback_info info)
     MEDIA_LOGE("AVPlayerNapi JsSetMediaSource Passed");
     auto task = std::make_shared<TaskHandler<void>>([jsPlayer, mediaSource, strategy]() {
         if (jsPlayer->player_ != nullptr) {
-            (void)jsPlayer->player_->SetMediaSource(mediaSource->header, strategy);
+             MEDIA_LOGE("header size %{public}d", mediaSource->header.size());
+            (void)jsPlayer->player_->SetMediaSource(mediaSource->url, mediaSource->header, strategy);
         }
     });
     (void)jsPlayer->taskQue_->EnqueueTask(task);
diff --git a/frameworks/js/common/common_napi.cpp b/frameworks/js/common/common_napi.cpp
index 7c50d5ec..eb59477c 100644
--- a/frameworks/js/common/common_napi.cpp
+++ b/frameworks/js/common/common_napi.cpp
@@ -172,6 +172,7 @@ bool CommonNapi::GetPropertyMap(napi_env env, napi_value value, std::map<std::st
 
     napi_value jsProName = nullptr;
     napi_value jsProValue = nullptr;
+    MEDIA_LOGE("GetPropertyMap jsProCount %{public}d", jsProCount);
     for (uint32_t i = 0; i < jsProCount; i++) {
         status = napi_get_element(env, jsProNameList, i, &jsProName);
         CHECK_AND_RETURN_RET_LOG(status == napi_ok, false, "get sub key failed");
diff --git a/frameworks/js/mediasource/media_source_napi.cpp b/frameworks/js/mediasource/media_source_napi.cpp
index da5b3403..e0c5fc05 100644
--- a/frameworks/js/mediasource/media_source_napi.cpp
+++ b/frameworks/js/mediasource/media_source_napi.cpp
@@ -27,7 +27,7 @@ const std::string CLASS_NAME = "MediaSource";
 thread_local napi_ref MediaSourceNapi::constructor_ = nullptr;
 
 napi_value MediaSourceNapi::Init(napi_env env, napi_value exports)
-{
+{   
     napi_property_descriptor staticProperty[] = {
         DECLARE_NAPI_STATIC_FUNCTION("createMediaSourceWithURL", JsCreateMediaSourceWithUrl),
     };
@@ -126,10 +126,11 @@ napi_value MediaSourceNapi::JsCreateMediaSourceWithUrl(napi_env env, napi_callba
 
     std::shared_ptr<AVMediaSource> mediaSource = GetMediaSource(env, jsMediaSource);
     mediaSource->url = CommonNapi::GetStringArgument(env, args[0]);
-
-    if (argCount >= 2 && napi_typeof(env, args[1], &valueType) == napi_ok && valueType != napi_object) {
+    MEDIA_LOGE("argCount %{public}d", argCount);
+   // if (argCount >= 2 && napi_typeof(env, args[1], &valueType) == napi_ok && valueType != napi_object) {
+        MEDIA_LOGE("JsCreateMediaSourceWithUrl get map");
         (void)CommonNapi::GetPropertyMap(env, args[1], mediaSource->header);
-    }
+  //  }
     MEDIA_LOGE("JsCreateMediaSourceWithUrl  Passed");
     return jsMediaSource;
 }
diff --git a/frameworks/native/player/player_impl.cpp b/frameworks/native/player/player_impl.cpp
index 3432eec2..61def1cf 100644
--- a/frameworks/native/player/player_impl.cpp
+++ b/frameworks/native/player/player_impl.cpp
@@ -104,6 +104,7 @@ int32_t PlayerImpl::Play()
 
 int32_t PlayerImpl::Prepare()
 {
+    MEDIA_LOGE("PlayerImpl Prepare A");
     MEDIA_LOGD("PlayerImpl:0x%{public}06" PRIXPTR " Prepare in", FAKE_POINTER(this));
     CHECK_AND_RETURN_RET_LOG(playerService_ != nullptr, MSERR_SERVICE_DIED, "player service does not exist..");
     return playerService_->Prepare();
@@ -111,6 +112,7 @@ int32_t PlayerImpl::Prepare()
 
 int32_t PlayerImpl::PrepareAsync()
 {
+    MEDIA_LOGE("PlayerImpl Prepare B");
     MEDIA_LOGD("PlayerImpl:0x%{public}06" PRIXPTR " PrepareAsync in", FAKE_POINTER(this));
     CHECK_AND_RETURN_RET_LOG(playerService_ != nullptr, MSERR_SERVICE_DIED, "player service does not exist..");
     return playerService_->PrepareAsync();
@@ -222,11 +224,11 @@ int32_t PlayerImpl::SetPlaybackSpeed(PlaybackRateMode mode)
     return playerService_->SetPlaybackSpeed(mode);
 }
 
-int32_t PlayerImpl::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) 
+int32_t PlayerImpl::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) 
 {
 
     CHECK_AND_RETURN_RET_LOG(playerService_ != nullptr, MSERR_SERVICE_DIED, "player service does not exist..");
-    return playerService_->SetMediaSource(header, strategy);
+    return playerService_->SetMediaSource(url, header, strategy);
 }
 
 
diff --git a/frameworks/native/player/player_impl.h b/frameworks/native/player/player_impl.h
index 22c7a8e1..6d5d4a4d 100644
--- a/frameworks/native/player/player_impl.h
+++ b/frameworks/native/player/player_impl.h
@@ -66,7 +66,7 @@ public:
     int32_t GetCurrentTrack(int32_t trackType, int32_t &index) override;
     int32_t SetDecryptConfig(const sptr<DrmStandard::IMediaKeySessionService> &keySessionProxy,
         bool svp) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     int32_t Init();
 private:
     std::shared_ptr<IPlayerService> playerService_ = nullptr;
diff --git a/interfaces/inner_api/native/player.h b/interfaces/inner_api/native/player.h
index 0327012a..5f4ced28 100644
--- a/interfaces/inner_api/native/player.h
+++ b/interfaces/inner_api/native/player.h
@@ -393,7 +393,7 @@ public:
      */
     virtual int32_t SetVolume(float leftVolume, float rightVolume) = 0;
 
-    virtual int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
+    virtual int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
 
     /**
      * @brief Changes the playback position.
diff --git a/services/engine/gstreamer/player/player_engine_gst_impl.cpp b/services/engine/gstreamer/player/player_engine_gst_impl.cpp
index 173fbea1..aeaa1444 100644
--- a/services/engine/gstreamer/player/player_engine_gst_impl.cpp
+++ b/services/engine/gstreamer/player/player_engine_gst_impl.cpp
@@ -905,13 +905,14 @@ int32_t PlayerEngineGstImpl::SetVolume(float leftVolume, float rightVolume)
     return MSERR_OK;
 }
 
-int32_t PlayerEngineGstImpl::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy)
+int32_t PlayerEngineGstImpl::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy)
 {
     std::unique_lock<std::mutex> lock(mutex_);
     if (playBinCtrler_ != nullptr) {
         for (const auto& pair : header) {
             MEDIA_LOGD("header info %s", pair.first.c_str());
         }
+        MEDIA_LOGD("SetMediaSource %{public}s", url.c_str());
         MEDIA_LOGD("SetMediaSource preferedWidth %d preferedHeight %d bufferDuration %d preferHDR %d", 
             strategy.preferedWidth, strategy.preferedHeight, strategy.preferedBufferDuration , strategy.preferHDR);
         //playBinCtrler_->SetDurationSize(durationSize);
diff --git a/services/engine/gstreamer/player/player_engine_gst_impl.h b/services/engine/gstreamer/player/player_engine_gst_impl.h
index 581d389d..1d172f60 100644
--- a/services/engine/gstreamer/player/player_engine_gst_impl.h
+++ b/services/engine/gstreamer/player/player_engine_gst_impl.h
@@ -57,7 +57,7 @@ public:
     int32_t GetVideoTrackInfo(std::vector<Format> &videoTrack) override;
     int32_t GetDuration(int32_t &duration) override;
     int32_t SetPlaybackSpeed(PlaybackRateMode mode) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     int32_t SetParameter(const Format &param) override;
     int32_t GetVideoHeight() override;
     int32_t SetLooping(bool loop) override;
diff --git a/services/engine/histreamer/player/hiplayer_impl.cpp b/services/engine/histreamer/player/hiplayer_impl.cpp
index 3e492558..feae3e78 100755
--- a/services/engine/histreamer/player/hiplayer_impl.cpp
+++ b/services/engine/histreamer/player/hiplayer_impl.cpp
@@ -182,8 +182,11 @@ int32_t HiPlayerImpl::SetSource(const std::string& uri)
     return TransStatus(Status::OK);
 }
 
-int32_t HiPlayerImpl::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy)
+int32_t HiPlayerImpl::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy)
 {
+    MEDIA_LOG_I("url %{public}s", url.c_str());
+    MEDIA_LOG_I("HiPlayerImpl SetMediaSource header size %{public}d", header.size());
+    MEDIA_LOG_I("HiPlayerImpl SetMediaSource strategy.preferedWidth %{public}d", strategy.preferedWidth);
     this->header = header;
     this->preferedWidth = strategy.preferedWidth;
     this->preferedHeight = strategy.preferedHeight;
diff --git a/services/engine/histreamer/player/hiplayer_impl.h b/services/engine/histreamer/player/hiplayer_impl.h
index ae0a3496..ae9d96f8 100755
--- a/services/engine/histreamer/player/hiplayer_impl.h
+++ b/services/engine/histreamer/player/hiplayer_impl.h
@@ -66,7 +66,7 @@ public:
     int32_t GetCurrentTime(int32_t& currentPositionMs) override;
     int32_t GetDuration(int32_t& durationMs) override;
     int32_t SetPlaybackSpeed(PlaybackRateMode mode) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     int32_t GetPlaybackSpeed(PlaybackRateMode& mode) override;
     int32_t SelectBitRate(uint32_t bitRate) override;
     int32_t GetAudioEffectMode(int32_t &effectMode) override;
diff --git a/services/include/i_player_service.h b/services/include/i_player_service.h
index e23f8e7e..87d55966 100644
--- a/services/include/i_player_service.h
+++ b/services/include/i_player_service.h
@@ -277,7 +277,7 @@ public:
      */
     virtual int32_t SetPlaybackSpeed(PlaybackRateMode mode) = 0;
 
-    virtual int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
+    virtual int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
     /**
      * @brief set the bit rate use for hls player
      *
diff --git a/services/services/engine_intf/i_player_engine.h b/services/services/engine_intf/i_player_engine.h
index 5f71c42f..0a64afb7 100644
--- a/services/services/engine_intf/i_player_engine.h
+++ b/services/services/engine_intf/i_player_engine.h
@@ -78,7 +78,7 @@ public:
     virtual int32_t GetDuration(int32_t &duration) = 0;
     virtual int32_t SetPlaybackSpeed(PlaybackRateMode mode) = 0;
     virtual int32_t GetPlaybackSpeed(PlaybackRateMode &mode) = 0;
-    virtual int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
+    virtual int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
     virtual int32_t SetVideoSurface(sptr<Surface> surface) = 0;
 
     virtual int32_t SetDecryptConfig(const sptr<OHOS::DrmStandard::IMediaKeySessionService> &keySessionProxy,
diff --git a/services/services/player/client/player_client.cpp b/services/services/player/client/player_client.cpp
index 5455d3a0..745910f9 100644
--- a/services/services/player/client/player_client.cpp
+++ b/services/services/player/client/player_client.cpp
@@ -258,11 +258,11 @@ int32_t PlayerClient::SetPlaybackSpeed(PlaybackRateMode mode)
     return playerProxy_->SetPlaybackSpeed(mode);
 }
 
-int32_t PlayerClient::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy)
+int32_t PlayerClient::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy)
 {
     std::lock_guard<std::mutex> lock(mutex_);
     CHECK_AND_RETURN_RET_LOG(playerProxy_ != nullptr, MSERR_SERVICE_DIED, "player service does not exist..");
-    return playerProxy_->SetMediaSource(header, strategy);
+    return playerProxy_->SetMediaSource(url, header, strategy);
 }
 
 int32_t PlayerClient::GetPlaybackSpeed(PlaybackRateMode &mode)
diff --git a/services/services/player/client/player_client.h b/services/services/player/client/player_client.h
index 60519684..6bb7173e 100644
--- a/services/services/player/client/player_client.h
+++ b/services/services/player/client/player_client.h
@@ -52,7 +52,7 @@ public:
     int32_t GetAudioTrackInfo(std::vector<Format> &audioTrack) override;
     int32_t GetVideoHeight() override;
     int32_t SetPlaybackSpeed(PlaybackRateMode mode) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     int32_t GetDuration(int32_t &duration) override;
     int32_t GetVideoTrackInfo(std::vector<Format> &videoTrack) override;
     int32_t GetVideoWidth() override;
diff --git a/services/services/player/ipc/i_standard_player_service.h b/services/services/player/ipc/i_standard_player_service.h
index 33e4f226..e000c280 100644
--- a/services/services/player/ipc/i_standard_player_service.h
+++ b/services/services/player/ipc/i_standard_player_service.h
@@ -55,7 +55,7 @@ public:
     virtual int32_t GetDuration(int32_t &duration) = 0;
     virtual int32_t SetPlaybackSpeed(PlaybackRateMode mode) = 0;
     virtual int32_t GetPlaybackSpeed(PlaybackRateMode &mode) = 0;
-    virtual int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
+    virtual int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) = 0;
 #ifdef SUPPORT_VIDEO
     virtual int32_t SetVideoSurface(sptr<Surface> surface) = 0;
 #endif
diff --git a/services/services/player/ipc/player_service_proxy.cpp b/services/services/player/ipc/player_service_proxy.cpp
index ab338123..36fbd790 100644
--- a/services/services/player/ipc/player_service_proxy.cpp
+++ b/services/services/player/ipc/player_service_proxy.cpp
@@ -517,7 +517,7 @@ int32_t PlayerServiceProxy::SetPlaybackSpeed(PlaybackRateMode mode)
     return reply.ReadInt32();
 }
 
-int32_t PlayerServiceProxy::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy)
+int32_t PlayerServiceProxy::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy)
 {
     MediaTrace trace("binder::SetMediaSource");
     MessageParcel data;
@@ -526,6 +526,7 @@ int32_t PlayerServiceProxy::SetMediaSource(std::map<std::string, std::string> he
     MEDIA_LOGI("PlayerServiceProxy SetMediaSource");
     bool token = data.WriteInterfaceToken(PlayerServiceProxy::GetDescriptor());
     CHECK_AND_RETURN_RET_LOG(token, MSERR_INVALID_OPERATION, "Failed to write descriptor!");
+    data.WriteString(url);
     auto headerSize = static_cast<uint32_t>(header.size());
     if (!data.WriteUint32(headerSize)) {
         MEDIA_LOGI("Write mapSize failed");
diff --git a/services/services/player/ipc/player_service_proxy.h b/services/services/player/ipc/player_service_proxy.h
index 86782e64..4b8e67e3 100644
--- a/services/services/player/ipc/player_service_proxy.h
+++ b/services/services/player/ipc/player_service_proxy.h
@@ -37,7 +37,7 @@ public:
     int32_t GetAudioTrackInfo(std::vector<Format> &audioTrack) override;
     int32_t AddSubSource(const std::string &url) override;
     int32_t SetPlaybackSpeed(PlaybackRateMode mode) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     int32_t AddSubSource(int32_t fd, int64_t offset, int64_t size) override;
     int32_t Seek(int32_t mSeconds, PlayerSeekMode mode) override;
     int32_t Stop() override;
diff --git a/services/services/player/ipc/player_service_stub.cpp b/services/services/player/ipc/player_service_stub.cpp
index 6c792927..6e83becc 100644
--- a/services/services/player/ipc/player_service_stub.cpp
+++ b/services/services/player/ipc/player_service_stub.cpp
@@ -355,11 +355,11 @@ int32_t PlayerServiceStub::SetPlaybackSpeed(PlaybackRateMode mode)
     return playerServer_->SetPlaybackSpeed(mode);
 }
 
-int32_t PlayerServiceStub::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy)
+int32_t PlayerServiceStub::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy)
 {
     MediaTrace trace("binder::SetMediaSource");
     CHECK_AND_RETURN_RET_LOG(playerServer_ != nullptr, MSERR_NO_MEMORY, "player server is nullptr");
-    return playerServer_->SetMediaSource(header,strategy);
+    return playerServer_->SetMediaSource(url, header,strategy);
 }
 
 int32_t PlayerServiceStub::GetPlaybackSpeed(PlaybackRateMode &mode)
@@ -709,8 +709,11 @@ int32_t PlayerServiceStub::SetPlaybackSpeed(MessageParcel &data, MessageParcel &
 
 int32_t PlayerServiceStub::SetMediaSource(MessageParcel &data, MessageParcel &reply)
 {   
+    std::string url = data.ReadString();
+    MEDIA_LOGE("SetMediaSource url %{public}s", url.c_str());
     auto mapSize = data.ReadUint32();
     std::map<std::string, std::string> headerMap;
+    MEDIA_LOGE("mapSize %{public}d", mapSize);
     while (mapSize--) {
         auto kstr = data.ReadString();
         auto vstr = data.ReadString();
@@ -725,7 +728,7 @@ int32_t PlayerServiceStub::SetMediaSource(MessageParcel &data, MessageParcel &re
     strategy.preferHDR = data.ReadBool();
     MEDIA_LOGE("SetMediaSource preferedWidth %{public}d preferedHeight %{public}d preferedBufferDuration %{public}d preferHDR %{public}d", 
         strategy.preferedWidth, strategy.preferedHeight, strategy.preferedBufferDuration, strategy.preferHDR);
-    reply.WriteInt32(SetMediaSource(headerMap, strategy));
+    reply.WriteInt32(SetMediaSource(url, headerMap, strategy));
     return MSERR_OK;
 }
 
diff --git a/services/services/player/ipc/player_service_stub.h b/services/services/player/ipc/player_service_stub.h
index 7f8f6171..6bbc0edc 100644
--- a/services/services/player/ipc/player_service_stub.h
+++ b/services/services/player/ipc/player_service_stub.h
@@ -72,7 +72,7 @@ public:
     int32_t DumpInfo(int32_t fd);
     int32_t DeselectTrack(int32_t index) override;
     int32_t GetCurrentTrack(int32_t trackType, int32_t &index) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
     bool IsPlaying() override;
     bool IsLooping() override;
     int32_t SetDecryptConfig(const sptr<DrmStandard::IMediaKeySessionService> &keySessionProxy,
diff --git a/services/services/player/server/player_server.cpp b/services/services/player/server/player_server.cpp
index fddb9e64..a5bc6674 100755
--- a/services/services/player/server/player_server.cpp
+++ b/services/services/player/server/player_server.cpp
@@ -136,7 +136,8 @@ int32_t PlayerServer::Init()
 }
 
 int32_t PlayerServer::SetSource(const std::string &url)
-{
+{   
+    MEDIA_LOGE("PlayerServer SetSource A");
     std::lock_guard<std::mutex> lock(mutex_);
     MediaTrace trace("PlayerServer::SetSource url");
     CHECK_AND_RETURN_RET_LOG(!url.empty(), MSERR_INVALID_VAL, "url is empty");
@@ -150,6 +151,7 @@ int32_t PlayerServer::SetSource(const std::string &url)
 
 int32_t PlayerServer::SetSource(const std::shared_ptr<IMediaDataSource> &dataSrc)
 {
+    MEDIA_LOGE("PlayerServer SetSource B");
     std::lock_guard<std::mutex> lock(mutex_);
     MediaTrace trace("PlayerServer::SetSource dataSrc");
     CHECK_AND_RETURN_RET_LOG(dataSrc != nullptr, MSERR_INVALID_VAL, "data source is nullptr");
@@ -171,6 +173,7 @@ int32_t PlayerServer::SetSource(const std::shared_ptr<IMediaDataSource> &dataSrc
 
 int32_t PlayerServer::SetSource(int32_t fd, int64_t offset, int64_t size)
 {
+    MEDIA_LOGE("PlayerServer SetSource C");
     std::lock_guard<std::mutex> lock(mutex_);
     MediaTrace trace("PlayerServer::SetSource fd");
     MEDIA_LOGW("KPI-TRACE: PlayerServer SetSource in(fd), fd: %{public}d, offset: %{public}" PRId64
@@ -218,8 +221,9 @@ int32_t PlayerServer::InitPlayEngine(const std::string &url)
     playerEngine_ = engineFactory->CreatePlayerEngine(appUid_, appPid_, appTokenId_);
     CHECK_AND_RETURN_RET_LOG(playerEngine_ != nullptr, MSERR_CREATE_PLAYER_ENGINE_FAILED,
         "failed to create player engine");
-
-    if (dataSrc_ == nullptr) {
+    if (header_.size() > 0) {
+        (void)playerEngine_->SetMediaSource(url_, header_, strategy_);
+    } else if (dataSrc_ == nullptr) {
         ret = playerEngine_->SetSource(url);
     } else {
         ret = playerEngine_->SetSource(dataSrc_);
@@ -916,9 +920,11 @@ int32_t PlayerServer::HandleSetPlaybackSpeed(PlaybackRateMode mode)
     return MSERR_OK;
 }
 
-int32_t PlayerServer::SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) 
-{
-    (void)playerEngine_->SetMediaSource(header, strategy);
+int32_t PlayerServer::SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) 
+{  
+    url_ = url;
+    header_ = header;
+    strategy_ = strategy;
     return MSERR_OK;
 }
 
diff --git a/services/services/player/server/player_server.h b/services/services/player/server/player_server.h
index 50033572..2376d309 100644
--- a/services/services/player/server/player_server.h
+++ b/services/services/player/server/player_server.h
@@ -96,7 +96,7 @@ public:
     int32_t AddSubSource(const std::string &url) override;
     int32_t AddSubSource(int32_t fd, int64_t offset, int64_t size) override;
     int32_t GetPlaybackSpeed(PlaybackRateMode &mode) override;
-    int32_t SetMediaSource(std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
+    int32_t SetMediaSource(std::string url, std::map<std::string, std::string> header, AVPlayStrategy strategy) override;
 #ifdef SUPPORT_VIDEO
     int32_t SetVideoSurface(sptr<Surface> surface) override;
 #endif
@@ -200,6 +200,9 @@ private:
     int32_t appUid_ = 0;
     int32_t appPid_ = 0;
     std::atomic<bool> inReleasing_ = false;
+    std::map<std::string, std::string> header_;
+    AVPlayStrategy strategy_;
+    std::string url_;
 };
 } // namespace Media
 } // namespace OHOS
