diff a/frameworks/js/avplayer/avplayer_napi.cpp b/frameworks/js/avplayer/avplayer_napi.cpp	(rejected hunks)
@@ -894,6 +894,29 @@ napi_value AVPlayerNapi::JsSelectBitrate(napi_env env, napi_callback_info info)
     return result;
 }
 
+bool ConvertFdUrl2Fd(std::string& uri, int32_t& fd, int32_t& offset, int32_t& length)
+{
+    size_t pos1 = uri.find("?");
+    size_t pos2 = uri.find("offset=");
+    size_t pos3 = uri.find("&");
+    if (pos1 == std::string::npos) {
+        std::string inputFd = uri.substr(sizeof("fd://") - 1);
+        return StrToInt(inputFd, fd);
+    } else {
+        std::string fdStr = uri.substr(strlen("fd://"), pos1 - strlen("fd://"));
+        CHECK_AND_RETURN_RET(StrToInt(fdStr, fd) && fd >= 0, false);
+    }
+    if (pos1 != std::string::npos && pos2 != std::string::npos) {
+        std::string offsetStr = uri.substr(pos2 + strlen("offset="), pos3 - pos2 - strlen("offset="));
+        CHECK_AND_RETURN_RET(StrToInt(offsetStr, offset) && offset >= 0, false);
+    }
+    if (pos1 != std::string::npos && pos2 != std::string::npos && pos3 != std::string::npos) {
+        std::string sizeStr = uri.substr(pos3 + sizeof("&size"));
+        CHECK_AND_RETURN_RET(StrToInt(sizeStr, length) && length >= 0, false);
+    }
+    return true;
+}
+
 void AVPlayerNapi::AddSubSource(std::string url)
 {
     MEDIA_LOGI("input url is %{private}s!", url.c_str());
