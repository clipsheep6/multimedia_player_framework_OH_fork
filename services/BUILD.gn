# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")

AUDIO_POLICY_SERVER_DIR =
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server"

ohos_prebuilt_etc("pulseaudio.rc") {
  source = "etc/pulseaudio.cfg"
  relative_install_dir = "init"
  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"
}

config("audio_service_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/audio_service/server",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiorenderer/include",
    "//drivers/peripheral/audio/interfaces/include",
  ]

  if (target_cpu == "arm") {
    cflags = [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("audio_service") {
  install_enable = true

  sources = [
    "src/audio_service/server/audio_manager_stub.cpp",
    "src/audio_service/server/audio_server.cpp",
  ]

  configs = [ ":audio_service_config" ]

  deps = [
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer:audio_capturer_source",
    "//foundation/multimedia/audio_framework/frameworks/native/audiorenderer:audio_renderer_sink",
    "//foundation/multimedia/audio_framework/frameworks/native/audiorenderer:renderer_sink_adapter",
    "//foundation/multimedia/audio_framework/frameworks/native/pulseaudio/src/daemon:pulseaudio",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiomanager:audio_client",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "multimedia"
  part_name = "multimedia_audio_framework"
}

group("audio_policy_service_packages") {
  deps = [
    ":audio_dump",
    ":audio_interrupt_policy_config",
    ":audio_policy.rc",
    ":audio_policy_service",
  ]
}

ohos_prebuilt_etc("audio_policy.rc") {
  source = "etc/audio_policy.cfg"
  relative_install_dir = "init"
  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"
}

config("audio_policy_public_config") {
  include_dirs = [
    "//drivers/peripheral/audio/interfaces/include",
    "//foundation/multimedia/audio_framework/services/include",
    "//foundation/multimedia/audio_framework/services/include/audio_service/client",
    "//foundation/distributedschedule/safwk/services/safwk/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audioadapter/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiopolicy/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiomanager/include",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service/common",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service/config",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service/interface",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service/listener",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service/manager",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server/service",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/common",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/server",
    "//foundation/multimedia/audio_framework/services/include/audio_policy/client",
    "//foundation/multimedia/audio_framework/services/include/audio_bluetooth/client",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//foundation/distributeddatamgr/distributeddatamgr/interfaces/innerkits/distributeddata/include",
    "//base/hiviewdfx/hilog/interfaces/native/inner_api/include",
    "//third_party/libxml2/include",
    "//third_party/pulseaudio/src",
    "//third_party/pulseaudio/confgure/src",
    "//third_party/pulseaudio/include",
    "//foundation/multimedia/audio_framework/frameworks/native/pulseaudio/include",
    "//utils/system/safwk/native/include",
    "//utils/native/base/include",
    "//third_party/bounds_checking_function/include",
    "//third_party/cJSON",
    "//drivers/peripheral/bluetooth/audio/interfaces/include",
    "//foundation/communication/bluetooth/interfaces/frameworks/inner/common",
    "//foundation/communication/bluetooth/interfaces/inner_api/include",
    "//foundation/communication/bluetooth/interfaces/inner_api/include/c_header",
    "//foundation/communication/bluetooth/services/bluetooth/ipc/include",
    "//foundation/communication/bluetooth/services/bluetooth/common/",
    "//foundation/multimedia/audio_framework/frameworks/native/audiorenderer/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  ldflags = [ "-Wl" ]
}

ohos_shared_library("audio_dump") {
  install_enable = true
  sources = [ "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_service_dump.cpp" ]

  public_configs = [ ":audio_policy_public_config" ]

  deps = [
    "//foundation/multimedia/audio_framework/frameworks/native/pulseaudio/src/pulse:pulse",
    "//third_party/bounds_checking_function:libsec_static",
    "//utils/native/base:utils",
  ]

  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]

  subsystem_name = "multimedia"
  part_name = "multimedia_audio_framework"
}

ohos_shared_library("audio_policy_service") {
  install_enable = true
  sources = [
    "//foundation/multimedia/audio_framework/services/src/audio_policy/client/audio_device_descriptor.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_capturer_state_change_listener_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_client_tracker_callback_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_policy_manager_listener_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_policy_manager_stub.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_policy_server.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_renderer_state_change_listener_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_ringermode_update_listener_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_stream_collector.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_stream_event_dispatcher.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/audio_volume_key_event_callback_proxy.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/audio_policy_service.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/config/audio_focus_parser.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/config/xml_parser.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/listener/device_status_listener.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/manager/audio_adapter_manager.cpp",
    "//foundation/multimedia/audio_framework/services/src/audio_policy/server/service/src/audio_policy_service_proxy.cpp",
  ]

  public_configs = [ ":audio_policy_public_config" ]

  deps = [
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/host:libhdf_host",
    "$hdf_uhdf_path/ipc:libhdf_ipc_adapter",
    "$hdf_uhdf_path/utils:libhdf_utils",
    "//foundation/communication/bluetooth/services/bluetooth/ipc:btipc_static",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/distributeddatamgr/distributeddatamgr/interfaces/innerkits/distributeddata:distributeddata_inner",
    "//foundation/distributeddatamgr/distributeddatamgr/services/distributeddataservice/adapter:distributeddata_adapter",
    "//foundation/multimedia/audio_framework/frameworks/native/audioadapter:pulse_audio_service_adapter",
    "//foundation/multimedia/audio_framework/frameworks/native/audiorenderer:audio_bluetooth_client",
    "//foundation/multimedia/audio_framework/services:audio_dump",
    "//third_party/libxml2:xml2",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "init:libbegetutil",
  ]
  subsystem_name = "multimedia"
  part_name = "multimedia_audio_framework"
}

ohos_prebuilt_etc("audio_interrupt_policy_config") {
  source = "$AUDIO_POLICY_SERVER_DIR/etc/audio_interrupt_policy_config.xml"

  subsystem_name = "multimedia"
  relative_install_dir = "audio"
  install_images = [ chipset_base_dir ]
  part_name = "multimedia_audio_framework"
}
